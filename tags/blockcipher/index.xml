<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>BlockCipher on Ashutosh Ahelleya</title><link>https://ashutosh1206.github.io/tags/blockcipher/</link><description>Recent content in BlockCipher on Ashutosh Ahelleya</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ashutosh1206.github.io/tags/blockcipher/index.xml" rel="self" type="application/rss+xml"/><item><title>USSH 3.0 - CTFZone</title><link>https://ashutosh1206.github.io/ctf/ctfzone18-ussh/</link><pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/ctfzone18-ussh/</guid><description>Challenge Points: 138
Challenge Description:
We&amp;rsquo;ve developed a new restricted shell. It also allows to manage user access more securely. Let&amp;rsquo;s try it
nc crypto-01.v7frkwrfyhsjtbpfcppnu.ctfz.one 1337
In this post, I will be discussing my solution for USSH-3.0 challenge from CTFZone which I think is the unintended way. The challenge was quite peculiar, involving “blind” exploit as you will see in this write-up. Some parts of the challenge might look like guessing, but if you read this write-up start-to-end, you will see that it was a well-tailored challenge.</description></item><item><title>BabyCrypto - CSAW CTF Quals</title><link>https://ashutosh1206.github.io/ctf/csawquals17-babycrypto/</link><pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/csawquals17-babycrypto/</guid><description>This challenge was a bit overrated, there were no complications in the challenge, as you will see when we discuss the writeup.
In this challenge, we are supposed to get the flag which is present in the server.
The server has an input-output program running, which gives AES-ECB encryption of the input given to it. The encryption takes place as follows:
Takes the input from the user Appends secret (which is the flag here) to the input Pads to make it a multiple of blocksize Encrypts the resultant string using AES in ECB mode Gives the ciphertext as the output We are only in control of the input to the server.</description></item><item><title>CBC Bit Flipping Attack</title><link>https://ashutosh1206.github.io/blog/cbc-bit-flipping/</link><pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/blog/cbc-bit-flipping/</guid><description>In this blog post, the attack on CBC mode of block cipher encryption will be discussed and in the end, detailed writeup for the 16th challenge of Matasano-Crypto-Challenge i.e. about the Bit Flipping Attack in AES-CBC will be provided with explanation!
I want the reader to go through these concepts discussed in the following blog posts, before actually understanding how the CBC Bit-Flipping Attack works:
Mode Detection Oracle Blocksize Detection Oracle We will list down all the information one must have access to, in order to initiate this attack:</description></item></channel></rss>