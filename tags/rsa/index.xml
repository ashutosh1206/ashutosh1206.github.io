<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RSA on Ash&#39;s blog</title>
    <link>https://ashutosh1206.github.io/tags/rsa/</link>
    <description>Recent content in RSA on Ash&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ashutosh1206.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>waRSAw - InCTFi 2019</title>
      <link>https://ashutosh1206.github.io/ctf/inctfi19-warsaw/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/inctfi19-warsaw/</guid>
      <description>&lt;p&gt;Intended solution of waRSAw challenge from InCTF Internationals 2019&lt;/p&gt;
&lt;p&gt;tl;dr variant of LSB Oracle Attack on unpadded RSA&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blind - Volga CTF Quals</title>
      <link>https://ashutosh1206.github.io/ctf/volgaquals19-blind/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/volgaquals19-blind/</guid>
      <description>Challenge Points: 200
Challenge Description:
Pull the flag&amp;hellip;if you can.
tl;dr solving RSA Digital Signature using it&amp;rsquo;s homomorphic property:
Calculate the signature of factors of message M to be signed, separately Combine them by multiplication over modulus to get the signature of M Based on Unpadded RSA Digital Signature about which you can read here-
https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures
There are various bash commands the program allows us to execute on the server:</description>
    </item>
    
    <item>
      <title>RSA - Teaser CONFidence CTF</title>
      <link>https://ashutosh1206.github.io/ctf/confidence-teaser19-rsa/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/confidence-teaser19-rsa/</guid>
      <description>tl;dr Coppersmith&amp;rsquo;s Attack to recover RSA primes
Challenge Points: 99
Challenge Description:
You can&amp;rsquo;t break my public key if you don&amp;rsquo;t know it, amirite?
The challenge is based on RSA and we are given the following script:
def bytes_to_long(data): return int(data.encode(&amp;#34;hex&amp;#34;),16) def rsa(msg,e,n): return pow(bytes_to_long(msg),e,n) flag = open(&amp;#39;flag.txt&amp;#39;,&amp;#39;r&amp;#39;).read() tmp = randint(2**1023, 2**1024) e = 65537 p = next_prime(0xDEAD*tmp+randint(2, 2**500)) q = next_prime(0xBEEF*tmp+randint(2, 2**500)) N = p*q print(&amp;#39;msg1 = &amp;#39;+str(rsa(&amp;#34;You can&amp;#39;t factor the modulus&amp;#34;,e,N))) print(&amp;#39;msg2 = &amp;#39;+str(rsa(&amp;#34;If you don&amp;#39;t know the modulus!</description>
    </item>
    
    <item>
      <title>Daring - Hxp CTF</title>
      <link>https://ashutosh1206.github.io/ctf/hxp18-daring/</link>
      <pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/hxp18-daring/</guid>
      <description>Challenge Points:
Challenge Description:
We encrypted our flag, but we lost the keys. Can you help?
This was a simple yet a very tricky challenge aimed at testing Number Theory basics. In this challenge we are given a small script:
#!/usr/bin/env python3 import os from Crypto.Cipher import AES from Crypto.Hash import SHA256 from Crypto.Util import Counter from Crypto.PublicKey import RSA flag = open(&amp;#39;flag.txt&amp;#39;, &amp;#39;rb&amp;#39;).read().strip() key = RSA.generate(1024, e=3) open(&amp;#39;pubkey.txt&amp;#39;, &amp;#39;w&amp;#39;).write(key.publickey().exportKey(&amp;#39;PEM&amp;#39;).decode() + &amp;#39;\n&amp;#39;) open(&amp;#39;rsa.</description>
    </item>
    
    <item>
      <title>Crypto writeups [Part-2] - InCTFi 2018</title>
      <link>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part2/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part2/</guid>
      <description>This blog post covers intended solutions of two crypto challenges from InCTF-2018: Request-Auth and EC-Auth.
Request-Auth Challenge Description
This was a medium level crypto challenge that I created for InCTF International-2018. In the challenge you are given multiple files: iv.txt, key.enc, publickey.pem, ServerSide.py, session.enc and also have a service running these files.
Contents of ServerSide.py:
#!/usr/bin/env python2.7 from Crypto.Cipher import AES from Crypto.PublicKey import RSA from Crypto.Util.number import * from os import urandom import sys BLOCKSIZE = 16 class Unbuffered(object): def __init__(self, stream): self.</description>
    </item>
    
    <item>
      <title>Crypto writeups [Part-1] - InCTFi 2018</title>
      <link>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part1/</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part1/</guid>
      <description>InCTF is over and I must say that we enjoyed a lot! We stayed for two days straight in front of our laptop screens, sleep deprived, fixing services, solving queries on IRC, eating and what not! My experience organising InCTF-2018, creating crypto challenges, how I came across the idea of creating all the crypto challenges etc. is another blog post I have to write soon, let us jump to what is in scope of this blog post.</description>
    </item>
    
    <item>
      <title>RSA-Padding - N1CTF</title>
      <link>https://ashutosh1206.github.io/ctf/n1ctf18-rsa-padding/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/n1ctf18-rsa-padding/</guid>
      <description>Challenge Points: 303
Challenge is running on the service: nc 47.75.39.249 23333
After surpassing the Proof of Work, we get the following challenge: On selecting the option get code, we get the following code that is being used for encryption:
#!/usr/bin/env python3 # -*- coding=utf-8 -*- from Crypto.Util.number import getPrime, GCD, bytes_to_long from hashlib import sha256 import random import signal import sys, os signal.alarm(20) m = b&amp;#34;xxxxxxxxxxxxxx&amp;#34; n = 21727106551797231400330796721401157037131178503238742210927927256416073956351568958100038047053002307191569558524956627892618119799679572039939819410371609015002302388267502253326720505214690802942662248282638776986759094777991439524946955458393011802700815763494042802326575866088840712980094975335414387283865492939790773300256234946983831571957038601270911425008907130353723909371646714722730577923843205527739734035515152341673364211058969041089741946974118237091455770042750971424415176552479618605177552145594339271192853653120859740022742221562438237923294609436512995857399568803043924319953346241964071252941 e = 3 def proof(): strings = &amp;#34;abcdefghijklmnopqrstuvwxyzWOERFJASKL&amp;#34; prefix = &amp;#34;&amp;#34;.</description>
    </item>
    
    <item>
      <title>RSA Quest - Pragyan CTF</title>
      <link>https://ashutosh1206.github.io/ctf/pragyan18-rsaquest/</link>
      <pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/pragyan18-rsaquest/</guid>
      <description>Challenge Points: 200
Challenge Description:
Rivest comes up with an encryption, and Shamir creates a service for decrypting any cipher text encrypted using Rivests’s encryption. Adleman is asked to decrypt a specific ciphertext, but he is not able to do so directly through Shamir’s service. Help him out.
The server code running at 128.199.224.175:34000 allows encryption and decryption of messages using unpadded RSA except decryption of ciphertext of the flag.</description>
    </item>
    
    <item>
      <title>Simpler Than RSA - MeePwn CTF</title>
      <link>https://ashutosh1206.github.io/ctf/meepwn17-simpler-than-rsa/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/meepwn17-simpler-than-rsa/</guid>
      <description>Challenge Points: 100
We are given an encryption script simple.py:
Other than the ciphertext, values of n, g, h are also public. The following function is used to generate values for the challenge:
def generate(nbits): p = getPrime(nbits) q = getPrime(nbits) n = p * q * p g = random.randint(1, n) h = pow(g, n, n) return (n, g, h) The encryption function:
def encrypt(m, n, g, h): r = random.</description>
    </item>
    
    <item>
      <title>BabyRSA - Codegate Preliminary CTF</title>
      <link>https://ashutosh1206.github.io/ctf/codegatepre18-babyrsa/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/codegatepre18-babyrsa/</guid>
      <description>Challenge Points: 349
The idea behind the challenge involved knowledge of basic Number Theory which was pretty cool!
We are given an encryption script and public key parameters that are used for encrypting a message. Everything in the script works normally except the GenerateKeys function:
def GenerateKeys(p, q): e = 65537 n = p * q pi_n = (p-1)*(q-1) d = mulinv(e, pi_n) h = (d+p)^(d-p) g = d*(p-0xdeadbeef) return [e, n, h, g] There is are two extra variables other than the regular public key parameters whose values are known: g and h</description>
    </item>
    
    <item>
      <title>Multi Layer RSA - InCTFi 2017</title>
      <link>https://ashutosh1206.github.io/ctf/inctfi17-multilayer-rsa/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/inctfi17-multilayer-rsa/</guid>
      <description>Challenge Points: 100
Challenge Description: [None]
Intended Solution
This is probably the easiest challenge in the Crypto section for this year&amp;rsquo;s InCTF. The encryption script:
from Crypto.Util.number import * flag = open(&amp;#34;flag.txt&amp;#34;).read() flag = int(flag.encode(&amp;#34;hex&amp;#34;),16) p = getPrime(512) q = getPrime(512) n = p*q phin = (p-1)*(q-1) encryption_keys = [34961, 3617491, 68962801, 293200159531, 1191694878666066510321450623792489136756229172407332230462797663298426983932272792657383336660801913848162204216417540955677965706955404313949733712340714861638106185597684745174398501025724130404133569866642454996521744281284226124355987843894614599718553178595963014434904833] for i in encryption_keys: assert GCD(i,phin) == 1 for i in encryption_keys: flag = pow(flag, i, n) flag = hex(flag)[2:].</description>
    </item>
    
    <item>
      <title>RSA 1s Fun - InCTFi 2017</title>
      <link>https://ashutosh1206.github.io/ctf/inctfi17-rsaisfun/</link>
      <pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/inctfi17-rsaisfun/</guid>
      <description>Challenge Points: 150
Challenge Description: Mathematics and Crypto make a deadly combination!
Intended solution!
The challenge, as the description suggests, involves applying mathematics to solve the RSA based encryption system. The encryption script:
from Crypto.Util.number import * e1 = 9 e2 = 123 def prime_gen(): while True: p = getPrime(1024) q = getPrime(1024) n = p*q phin = (p-1)*(q-1) if GCD(e1, phin) == 1 and GCD(e2, phin) == 1: return (p, q, n) p, q, n = prime_gen() print &amp;#34;p: &amp;#34;, p print &amp;#34;q: &amp;#34;, q print &amp;#34;n: &amp;#34;, n flag = bytes_to_long(open(&amp;#34;flag.</description>
    </item>
    
    <item>
      <title>Gracias - ASIS CTF Finals</title>
      <link>https://ashutosh1206.github.io/ctf/asisfinals-gracias/</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ashutosh1206.github.io/ctf/asisfinals-gracias/</guid>
      <description>Challenge Points: 297
Challenge Solves: 9
Challenge Description:
Some people think that combination of cryptographic systems will definitely improve the security. That’s your turn to prove them wrong.
This is a multi-prime RSA challenge where we are given an encryption script, which has two functions:
Generating public and private keys - make_pubpri Encrypting data using the public key generated from the first function - encrypt Preliminary Analysis: make_pubpri function Function generating public and private keys:</description>
    </item>
    
  </channel>
</rss>
