<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BlockCipher on Ash's blog</title><link>https://ashutosh1206.github.io/tags/blockcipher/</link><description>Recent content in BlockCipher on Ash's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 23 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://ashutosh1206.github.io/tags/blockcipher/index.xml" rel="self" type="application/rss+xml"/><item><title>USSH 3.0 - CTFZone</title><link>https://ashutosh1206.github.io/ctf/ctfzone18-ussh/</link><pubDate>Mon, 23 Jul 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/ctfzone18-ussh/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 138&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>We&amp;rsquo;ve developed a new restricted shell. It also allows to manage user access more securely. Let&amp;rsquo;s try it&lt;br>
&lt;code>nc crypto-01.v7frkwrfyhsjtbpfcppnu.ctfz.one 1337&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>In this post, I will be discussing my solution for USSH-3.0 challenge from CTFZone which I think is the unintended way. The challenge was quite peculiar, involving “blind” exploit as you will see in this write-up. Some parts of the challenge might look like guessing, but if you read this write-up start-to-end, you will see that it was a well-tailored challenge.&lt;/p></description></item><item><title>BabyCrypto - CSAW CTF Quals</title><link>https://ashutosh1206.github.io/ctf/csawquals17-babycrypto/</link><pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/csawquals17-babycrypto/</guid><description>&lt;p>This challenge was a bit overrated, there were no complications in the challenge, as you will see when we discuss the writeup.&lt;/p>
&lt;p>In this challenge, we are supposed to get the flag which is present in the server.&lt;br>
The server has an input-output program running, which gives AES-ECB encryption of the input given to it. The encryption takes place as follows:&lt;/p>
&lt;ol>
&lt;li>Takes the input from the user&lt;/li>
&lt;li>Appends &lt;code>secret&lt;/code> (which is the flag here) to the input&lt;/li>
&lt;li>Pads to make it a multiple of blocksize&lt;/li>
&lt;li>Encrypts the resultant string using AES in ECB mode&lt;/li>
&lt;li>Gives the ciphertext as the output&lt;/li>
&lt;/ol>
&lt;p>We are only in control of the input to the server. Using the input that we give, we need to get the &lt;code>secret&lt;/code>.&lt;/p></description></item><item><title>CBC Bit Flipping Attack</title><link>https://ashutosh1206.github.io/blog/cbc-bit-flipping/</link><pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/blog/cbc-bit-flipping/</guid><description>&lt;p>In this blog post, the attack on CBC mode of block cipher encryption will be discussed and in the end, detailed writeup for the &lt;a href="https://cryptopals.com/sets/2/challenges/16">16th challenge of Matasano-Crypto-Challenge&lt;/a> i.e. about the Bit Flipping Attack in AES-CBC will be provided with explanation!&lt;/p>
&lt;p>I want the reader to go through these concepts discussed in the following blog posts, before actually understanding how the CBC Bit-Flipping Attack works:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#mode-detection">Mode Detection Oracle&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher#block-size-detection">Blocksize Detection Oracle&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>We will list down all the information one must have access to, in order to initiate this attack:&lt;/p></description></item></channel></rss>