<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RSA on Ash's blog</title><link>https://ashutosh1206.github.io/tags/rsa/</link><description>Recent content in RSA on Ash's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 29 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://ashutosh1206.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml"/><item><title>waRSAw - InCTFi 2019</title><link>https://ashutosh1206.github.io/ctf/inctfi19-warsaw/</link><pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/inctfi19-warsaw/</guid><description>&lt;p>Intended solution of waRSAw challenge from InCTF Internationals 2019&lt;/p>
&lt;p>tl;dr variant of LSB Oracle Attack on unpadded RSA&lt;/p></description></item><item><title>Blind - Volga CTF Quals</title><link>https://ashutosh1206.github.io/ctf/volgaquals19-blind/</link><pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/volgaquals19-blind/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 200&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Pull the flag&amp;hellip;if you can.&lt;/p>
&lt;/blockquote>
&lt;p>tl;dr solving RSA Digital Signature using it&amp;rsquo;s homomorphic property:&lt;/p>
&lt;ol>
&lt;li>Calculate the signature of factors of message &lt;code>M&lt;/code> to be signed, separately&lt;/li>
&lt;li>Combine them by multiplication over modulus to get the signature of &lt;code>M&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>Based on Unpadded RSA Digital Signature about which you can read here-&lt;br>
&lt;a href="https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures">https://github.com/ashutosh1206/Crypton/tree/master/Digital-Signatures/Unpadded-RSA-Digital-Signatures&lt;/a>&lt;/p>
&lt;p>There are various bash commands the program allows us to execute on the server:&lt;/p>
&lt;ol>
&lt;li>&lt;code>ls&lt;/code> – list all files in a directory&lt;/li>
&lt;li>&lt;code>dir&lt;/code> – list all files in a directory&lt;/li>
&lt;li>&lt;code>cd&lt;/code> – change directory&lt;/li>
&lt;li>&lt;code>cat&lt;/code> – print contents of a file&lt;/li>
&lt;li>&lt;code>exit&lt;/code> – exit the program&lt;/li>
&lt;/ol>
&lt;p>Notice in the given source code that the server allows execution of &lt;code>ls&lt;/code> and &lt;code>dir&lt;/code> commands without a signature, while it requires signature of the whole command when we want to execute &lt;code>cd&lt;/code>, &lt;code>cat&lt;/code>, &lt;code>exit&lt;/code> commands.&lt;/p></description></item><item><title>RSA - Teaser CONFidence CTF</title><link>https://ashutosh1206.github.io/ctf/confidence-teaser19-rsa/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/confidence-teaser19-rsa/</guid><description>&lt;p>tl;dr Coppersmith&amp;rsquo;s Attack to recover RSA primes&lt;/p>
&lt;p>&lt;strong>Challenge Points&lt;/strong>: 99&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>You can&amp;rsquo;t break my public key if you don&amp;rsquo;t know it, amirite?&lt;/p>
&lt;/blockquote>
&lt;p>The challenge is based on RSA and we are given the following script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bytes_to_long&lt;/span>(data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> int(data&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;hex&amp;#34;&lt;/span>),&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">rsa&lt;/span>(msg,e,n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pow(bytes_to_long(msg),e,n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;flag.txt&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmp &lt;span style="color:#f92672">=&lt;/span> randint(&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">1023&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> next_prime(&lt;span style="color:#ae81ff">0xDEAD&lt;/span>&lt;span style="color:#f92672">*&lt;/span>tmp&lt;span style="color:#f92672">+&lt;/span>randint(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#f92672">=&lt;/span> next_prime(&lt;span style="color:#ae81ff">0xBEEF&lt;/span>&lt;span style="color:#f92672">*&lt;/span>tmp&lt;span style="color:#f92672">+&lt;/span>randint(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>N &lt;span style="color:#f92672">=&lt;/span> p&lt;span style="color:#f92672">*&lt;/span>q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;msg1 = &amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(rsa(&lt;span style="color:#e6db74">&amp;#34;You can&amp;#39;t factor the modulus&amp;#34;&lt;/span>,e,N)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;msg2 = &amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(rsa(&lt;span style="color:#e6db74">&amp;#34;If you don&amp;#39;t know the modulus!&amp;#34;&lt;/span>,e,N)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;flag = &amp;#39;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>str(rsa(flag,e,N)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are given ciphertext of two plaintext messages \(m_1\) “You can’t factor the modulus” and \(m_2\) “If you don’t know the modulus!”, and encrypted text of the flag in &lt;code>output.txt&lt;/code>:&lt;/p></description></item><item><title>Daring - Hxp CTF</title><link>https://ashutosh1206.github.io/ctf/hxp18-daring/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/hxp18-daring/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>:&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>We encrypted our flag, but we lost the keys. Can you help?&lt;/p>
&lt;/blockquote>
&lt;p>This was a simple yet a very tricky challenge aimed at testing Number Theory basics. In this challenge we are given a small script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Hash &lt;span style="color:#f92672">import&lt;/span> SHA256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util &lt;span style="color:#f92672">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.PublicKey &lt;span style="color:#f92672">import&lt;/span> RSA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;flag.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;rb&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> RSA&lt;span style="color:#f92672">.&lt;/span>generate(&lt;span style="color:#ae81ff">1024&lt;/span>, e&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>open(&lt;span style="color:#e6db74">&amp;#39;pubkey.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>write(key&lt;span style="color:#f92672">.&lt;/span>publickey()&lt;span style="color:#f92672">.&lt;/span>exportKey(&lt;span style="color:#e6db74">&amp;#39;PEM&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>decode() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>open(&lt;span style="color:#e6db74">&amp;#39;rsa.enc&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>write(pow(int&lt;span style="color:#f92672">.&lt;/span>from_bytes(flag&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">128&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>), &lt;span style="color:#e6db74">&amp;#39;big&amp;#39;&lt;/span>), key&lt;span style="color:#f92672">.&lt;/span>e, key&lt;span style="color:#f92672">.&lt;/span>n)&lt;span style="color:#f92672">.&lt;/span>to_bytes(&lt;span style="color:#ae81ff">128&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;big&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> SHA256&lt;span style="color:#f92672">.&lt;/span>new(key&lt;span style="color:#f92672">.&lt;/span>exportKey(&lt;span style="color:#e6db74">&amp;#39;DER&amp;#39;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>open(&lt;span style="color:#e6db74">&amp;#39;aes.enc&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>write(AES&lt;span style="color:#f92672">.&lt;/span>new(key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CTR, counter&lt;span style="color:#f92672">=&lt;/span>Counter&lt;span style="color:#f92672">.&lt;/span>new(&lt;span style="color:#ae81ff">128&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>encrypt(flag))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we analyse the script carefully, we would notice that the same flag is encrypted in two different, independent ways:&lt;/p></description></item><item><title>Crypto writeups [Part-2] - InCTFi 2018</title><link>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part2/</link><pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part2/</guid><description>&lt;p>This blog post covers intended solutions of two crypto challenges from InCTF-2018: &lt;strong>Request-Auth&lt;/strong> and &lt;strong>EC-Auth&lt;/strong>.&lt;/p>
&lt;h1 id="request-auth">Request-Auth&lt;/h1>
&lt;p>&lt;img src="https://ashutosh1206.github.io/inctfi18-crypto-part2-1.png" alt="picture">&lt;br>
&lt;em>Challenge Description&lt;/em>&lt;/p>
&lt;p>This was a medium level crypto challenge that I created for InCTF International-2018. In the challenge you are given multiple files: &lt;code>iv.txt&lt;/code>, &lt;code>key.enc&lt;/code>, &lt;code>publickey.pem&lt;/code>, &lt;code>ServerSide.py&lt;/code>, &lt;code>session.enc&lt;/code> and also have a service running these files.&lt;/p>
&lt;p>Contents of &lt;code>ServerSide.py&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python2.7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.PublicKey &lt;span style="color:#f92672">import&lt;/span> RSA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> os &lt;span style="color:#f92672">import&lt;/span> urandom
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BLOCKSIZE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Unbuffered&lt;/span>(object):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, stream):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>stream &lt;span style="color:#f92672">=&lt;/span> stream
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span>(self, data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>stream&lt;span style="color:#f92672">.&lt;/span>write(data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>stream&lt;span style="color:#f92672">.&lt;/span>flush()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">writelines&lt;/span>(self, datas):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>stream&lt;span style="color:#f92672">.&lt;/span>writelines(datas)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>stream&lt;span style="color:#f92672">.&lt;/span>flush()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __getattr__(self, attr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> getattr(self&lt;span style="color:#f92672">.&lt;/span>stream, attr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sys&lt;span style="color:#f92672">.&lt;/span>stdout &lt;span style="color:#f92672">=&lt;/span> Unbuffered(sys&lt;span style="color:#f92672">.&lt;/span>stdout)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">colors&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\033&lt;/span>&lt;span style="color:#e6db74">[0m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> red&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\033&lt;/span>&lt;span style="color:#e6db74">[31m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> green&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\033&lt;/span>&lt;span style="color:#e6db74">[32m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> orange&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\033&lt;/span>&lt;span style="color:#e6db74">[33m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blue&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\033&lt;/span>&lt;span style="color:#e6db74">[34m&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">unpad&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> s[:&lt;span style="color:#f92672">-&lt;/span>ord(s[len(s) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>])]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">check_valid_request&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(s) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> s[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bi0s&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> s[&lt;span style="color:#ae81ff">1&lt;/span>][:&lt;span style="color:#ae81ff">7&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;userid=&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> s[&lt;span style="color:#ae81ff">2&lt;/span>][:&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;user=&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ServerSide&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, key, iv):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>key &lt;span style="color:#f92672">=&lt;/span> key[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>iv &lt;span style="color:#f92672">=&lt;/span> iv[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">process_request&lt;/span>(self, req_enc):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj2 &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(self&lt;span style="color:#f92672">.&lt;/span>key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, self&lt;span style="color:#f92672">.&lt;/span>iv)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request &lt;span style="color:#f92672">=&lt;/span> obj2&lt;span style="color:#f92672">.&lt;/span>decrypt(req_enc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> check_valid_request(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_AES_key&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_enc &lt;span style="color:#f92672">=&lt;/span> raw_input(&lt;span style="color:#e6db74">&amp;#34;Enter encrypted key value in hex: &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_enc &lt;span style="color:#f92672">=&lt;/span> int(key_enc, &lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print colors&lt;span style="color:#f92672">.&lt;/span>red &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Enter valid input!&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#f92672">.&lt;/span>exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priv_key &lt;span style="color:#f92672">=&lt;/span> RSA&lt;span style="color:#f92672">.&lt;/span>importKey(open(&lt;span style="color:#e6db74">&amp;#34;privatekey.pem&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, d &lt;span style="color:#f92672">=&lt;/span> priv_key&lt;span style="color:#f92672">.&lt;/span>n, priv_key&lt;span style="color:#f92672">.&lt;/span>d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_AES &lt;span style="color:#f92672">=&lt;/span> pow(key_enc, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_AES &lt;span style="color:#f92672">=&lt;/span> long_to_bytes(key_AES)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> key_AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string1 &lt;span style="color:#f92672">=&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>blue &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$\ $$\ $$$$$$&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$ | \__|$$$ __$$&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$$$$$$\ $$\ $$$$\ $$ | $$$$$$$&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$ __$$\ $$ |$$\$$\$$ |$$ _____|
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$ | $$ |$$ |$$ \$$$$ |\$$$$$$&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$ | $$ |$$ |$$ |\$$$ | \____$$&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">$$$$$$$ |$$ |\$$$$$$ /$$$$$$$ |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">\_______/ \__| \______/ \_______/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print colors&lt;span style="color:#f92672">.&lt;/span>orange &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Welcome to bi0s Request Validation Service&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print string1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> get_AES_key()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iv &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;iv.txt&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj1 &lt;span style="color:#f92672">=&lt;/span> ServerSide(key, iv)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ct &lt;span style="color:#f92672">=&lt;/span> raw_input(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Enter value of encrypted session request in hex: &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ct &lt;span style="color:#f92672">=&lt;/span> ct&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#34;hex&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">TypeError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print colors&lt;span style="color:#f92672">.&lt;/span>red &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Enter a valid hex string!&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#f92672">.&lt;/span>exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> obj1&lt;span style="color:#f92672">.&lt;/span>process_request(ct) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print colors&lt;span style="color:#f92672">.&lt;/span>green &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Valid request!&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print colors&lt;span style="color:#f92672">.&lt;/span>red &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Invalid request!&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>reset
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Okay, so the service is basically implementing a hybrid cipher- a combination of RSA and AES to authenticate session requests coming from a user and is internally using a public and a private key in this process.&lt;/p></description></item><item><title>Crypto writeups [Part-1] - InCTFi 2018</title><link>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part1/</link><pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/inctfi18-crypto-part1/</guid><description>&lt;p>InCTF is over and I must say that we enjoyed a lot! We stayed for two days straight in front of our laptop screens, sleep deprived, fixing services, solving queries on IRC, eating and what not! My experience organising InCTF-2018, creating crypto challenges, how I came across the idea of creating all the crypto challenges etc. is another blog post I have to write soon, let us jump to what is in scope of this blog post.&lt;/p></description></item><item><title>RSA-Padding - N1CTF</title><link>https://ashutosh1206.github.io/ctf/n1ctf18-rsa-padding/</link><pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/n1ctf18-rsa-padding/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 303&lt;/p>
&lt;p>Challenge is running on the service: &lt;code>nc 47.75.39.249 23333&lt;/code>&lt;br>
After surpassing the Proof of Work, we get the following challenge:
&lt;img src="https://ashutosh1206.github.io/n1ctf18-rsapadding1.png" alt="picture">&lt;/p>
&lt;p>On selecting the option &lt;strong>&lt;code>get code&lt;/code>&lt;/strong>, we get the following code that is being used for encryption:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># -*- coding=utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> getPrime, GCD, bytes_to_long
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> hashlib &lt;span style="color:#f92672">import&lt;/span> sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> signal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> sys&lt;span style="color:#f92672">,&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>signal&lt;span style="color:#f92672">.&lt;/span>alarm(&lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;xxxxxxxxxxxxxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">21727106551797231400330796721401157037131178503238742210927927256416073956351568958100038047053002307191569558524956627892618119799679572039939819410371609015002302388267502253326720505214690802942662248282638776986759094777991439524946955458393011802700815763494042802326575866088840712980094975335414387283865492939790773300256234946983831571957038601270911425008907130353723909371646714722730577923843205527739734035515152341673364211058969041089741946974118237091455770042750971424415176552479618605177552145594339271192853653120859740022742221562438237923294609436512995857399568803043924319953346241964071252941&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">proof&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strings &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;abcdefghijklmnopqrstuvwxyzWOERFJASKL&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prefix &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(random&lt;span style="color:#f92672">.&lt;/span>sample(strings, &lt;span style="color:#ae81ff">6&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> starwith &lt;span style="color:#f92672">=&lt;/span> str(random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">10000&lt;/span>, &lt;span style="color:#ae81ff">99999&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">sha256(&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+str).hexdigest().startswith(&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;) == True
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Please give me str
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#f92672">%&lt;/span>(prefix, starwith)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(pf)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> sha256((prefix&lt;span style="color:#f92672">+&lt;/span>s)&lt;span style="color:#f92672">.&lt;/span>encode())&lt;span style="color:#f92672">.&lt;/span>hexdigest()&lt;span style="color:#f92672">.&lt;/span>startswith(starwith):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cmd&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. get code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. get flag
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Please tell me, what you want?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(help)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> c &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Enter Error!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> proof():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Check Failed!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> welcom()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> cmd():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;file.py&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(f&lt;span style="color:#f92672">.&lt;/span>read())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mm &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(m)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> pow(mm, e) &lt;span style="color:#f92672">!=&lt;/span> pow(mm, e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sys&lt;span style="color:#f92672">.&lt;/span>stdout&lt;span style="color:#f92672">.&lt;/span>write(&lt;span style="color:#e6db74">&amp;#34;Please give me a padding: &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding &lt;span style="color:#f92672">=&lt;/span> input()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding &lt;span style="color:#f92672">=&lt;/span> int(sha256(padding&lt;span style="color:#f92672">.&lt;/span>encode())&lt;span style="color:#f92672">.&lt;/span>hexdigest(),&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> pow(mm&lt;span style="color:#f92672">+&lt;/span>padding, e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Your Ciphertext is: &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">%&lt;/span>c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__main__&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon selecting the &lt;strong>&lt;code>get flag&lt;/code>&lt;/strong> option, the following computation is done:&lt;br>
$$c \equiv (flag + sha256(input))^3\mod n$$
where &lt;code>input&lt;/code> is an input string that we give to the server, sha256() is a function that generates integer representation of SHA-256 hash of the &lt;code>input&lt;/code> and &lt;code>c&lt;/code> is the corresponding ciphertext.&lt;/p></description></item><item><title>RSA Quest - Pragyan CTF</title><link>https://ashutosh1206.github.io/ctf/pragyan18-rsaquest/</link><pubDate>Sun, 04 Mar 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/pragyan18-rsaquest/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 200&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Rivest comes up with an encryption, and Shamir creates a service for decrypting any cipher text encrypted using Rivests’s encryption. Adleman is asked to decrypt a specific ciphertext, but he is not able to do so directly through Shamir’s service. Help him out.&lt;/p>
&lt;/blockquote>
&lt;p>The server code running at 128.199.224.175:34000 allows encryption and decryption of messages using unpadded RSA except decryption of ciphertext of the flag.&lt;/p></description></item><item><title>Simpler Than RSA - MeePwn CTF</title><link>https://ashutosh1206.github.io/ctf/meepwn17-simpler-than-rsa/</link><pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/meepwn17-simpler-than-rsa/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 100&lt;/p>
&lt;p>We are given an encryption script &lt;a href="https://github.com/ashutosh1206/Crypto-CTF-Writeups/blob/master/2017/MeePwn-CTF/Simpler-Than-RSA/simple.py">simple.py&lt;/a>:&lt;/p>
&lt;p>Other than the ciphertext, values of &lt;code>n&lt;/code>, &lt;code>g&lt;/code>, &lt;code>h&lt;/code> are also public. The following function is used to generate values for the challenge:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(nbits):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	p &lt;span style="color:#f92672">=&lt;/span> getPrime(nbits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	q &lt;span style="color:#f92672">=&lt;/span> getPrime(nbits)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q &lt;span style="color:#f92672">*&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	g &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	h &lt;span style="color:#f92672">=&lt;/span> pow(g, n, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> (n, g, h)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The encryption function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(m, n, g, h):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	r &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	c &lt;span style="color:#f92672">=&lt;/span> pow(pow(g, m, n) &lt;span style="color:#f92672">*&lt;/span> pow(h, r, n), &lt;span style="color:#ae81ff">1&lt;/span>, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, the ciphertext for each character in the plaintext is generated separately.&lt;br>
For \(i^{th}\) byte of message we can write the corresponding ciphertext as:&lt;br>
$$c_i \equiv ((g^{m_i}\mod n) * (h^r\mod n)) \mod n$$
Given: \(h \equiv g^n \mod n\). We can now write:&lt;br>
$$c_i \equiv ((g^{m_i}\mod n) * (g^{nr}\mod n)) \mod n$$
$$\implies c_i \equiv g^{m_i + nr}\mod n$$&lt;/p></description></item><item><title>BabyRSA - Codegate Preliminary CTF</title><link>https://ashutosh1206.github.io/ctf/codegatepre18-babyrsa/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/codegatepre18-babyrsa/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 349&lt;/p>
&lt;p>The idea behind the challenge involved knowledge of basic Number Theory which was pretty cool!&lt;/p>
&lt;p>We are given &lt;a href="">an encryption script&lt;/a> and public key parameters that are used for encrypting a message. Everything in the script works normally except the &lt;code>GenerateKeys&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">GenerateKeys&lt;/span>(p, q):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pi_n &lt;span style="color:#f92672">=&lt;/span> (p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>(q&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> mulinv(e, pi_n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#f92672">=&lt;/span> (d&lt;span style="color:#f92672">+&lt;/span>p)&lt;span style="color:#f92672">^&lt;/span>(d&lt;span style="color:#f92672">-&lt;/span>p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> g &lt;span style="color:#f92672">=&lt;/span> d&lt;span style="color:#f92672">*&lt;/span>(p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0xdeadbeef&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [e, n, h, g]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is are two extra variables other than the regular public key parameters whose values are known: &lt;code>g&lt;/code> and &lt;code>h&lt;/code>&lt;/p></description></item><item><title>Multi Layer RSA - InCTFi 2017</title><link>https://ashutosh1206.github.io/ctf/inctfi17-multilayer-rsa/</link><pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/inctfi17-multilayer-rsa/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 100&lt;br>
&lt;strong>Challenge Description&lt;/strong>: [None]&lt;/p>
&lt;p>Intended Solution&lt;/p>
&lt;p>This is probably the easiest challenge in the Crypto section for this year&amp;rsquo;s InCTF. The encryption script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;flag.txt&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> int(flag&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;hex&amp;#34;&lt;/span>),&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">512&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">512&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> p&lt;span style="color:#f92672">*&lt;/span>q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>phin &lt;span style="color:#f92672">=&lt;/span> (p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>(q&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>encryption_keys &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">34961&lt;/span>, &lt;span style="color:#ae81ff">3617491&lt;/span>, &lt;span style="color:#ae81ff">68962801&lt;/span>, &lt;span style="color:#ae81ff">293200159531&lt;/span>, &lt;span style="color:#ae81ff">1191694878666066510321450623792489136756229172407332230462797663298426983932272792657383336660801913848162204216417540955677965706955404313949733712340714861638106185597684745174398501025724130404133569866642454996521744281284226124355987843894614599718553178595963014434904833&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> encryption_keys:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">assert&lt;/span> GCD(i,phin) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> encryption_keys:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#f92672">=&lt;/span> pow(flag, i, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> hex(flag)[&lt;span style="color:#ae81ff">2&lt;/span>:]&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;L&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj1 &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;ciphertext.txt&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>obj1&lt;span style="color:#f92672">.&lt;/span>write(flag)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, the encryption is &lt;strong>layered&lt;/strong>; after the message is encrypted using the first public key i.e. first element of &lt;code>encryption_keys&lt;/code>, the result is then encrypted with the next public key i.e. second element of &lt;code>encryption_keys&lt;/code> and so on. We can write it mathematically as:
$$c_1 \equiv m_1^{e_1}\mod n$$
$$c_2 \equiv c_1^{e_2}\mod n$$
$$&amp;hellip;$$
$$c_5 \equiv c_4^{e_5}\mod n$$&lt;/p></description></item><item><title>RSA 1s Fun - InCTFi 2017</title><link>https://ashutosh1206.github.io/ctf/inctfi17-rsaisfun/</link><pubDate>Sun, 17 Dec 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/inctfi17-rsaisfun/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 150&lt;br>
&lt;strong>Challenge Description&lt;/strong>: Mathematics and Crypto make a deadly combination!&lt;/p>
&lt;p>Intended solution!&lt;/p>
&lt;p>The challenge, as the description suggests, involves applying mathematics to solve the RSA based encryption system. The encryption script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">prime_gen&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> p&lt;span style="color:#f92672">*&lt;/span>q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phin &lt;span style="color:#f92672">=&lt;/span> (p&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">*&lt;/span>(q&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> GCD(e1, phin) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span> GCD(e2, phin) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (p, q, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p, q, n &lt;span style="color:#f92672">=&lt;/span> prime_gen()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#34;p: &amp;#34;&lt;/span>, p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#34;q: &amp;#34;&lt;/span>, q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#34;n: &amp;#34;&lt;/span>, n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(open(&lt;span style="color:#e6db74">&amp;#34;flag.txt&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> flag &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#66d9ef">assert&lt;/span> flag&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1 &lt;span style="color:#f92672">=&lt;/span> pow(flag, e1, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2 &lt;span style="color:#f92672">=&lt;/span> pow(flag, e2, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#34;c1: &amp;#34;&lt;/span>, c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print &lt;span style="color:#e6db74">&amp;#34;c2: &amp;#34;&lt;/span>, c2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Two different public key exponents \(e_1 = 9\) and \(e_2 = 123\) are being used to encrypt the same message and generate ciphertexts \(c_1\) and \(c_2\) respectively. By &lt;a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm">Extended Euclidean Algorithm&lt;/a>, we can calculate coefficients of Bezout&amp;rsquo;s identity \(a, b\) as:&lt;br>
$$e_1*a + e_2*b = gcd(e_1, e_2)$$
$$(9*14) + (123*(-1)) = 3$$&lt;/p></description></item><item><title>Gracias - ASIS CTF Finals</title><link>https://ashutosh1206.github.io/ctf/asisfinals-gracias/</link><pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate><guid>https://ashutosh1206.github.io/ctf/asisfinals-gracias/</guid><description>&lt;p>&lt;strong>Challenge Points&lt;/strong>: 297&lt;br>
&lt;strong>Challenge Solves&lt;/strong>: 9&lt;br>
&lt;strong>Challenge Description&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Some people think that combination of cryptographic systems will definitely improve the security.
That’s your turn to prove them wrong.&lt;/p>
&lt;/blockquote>
&lt;p>This is a multi-prime RSA challenge where we are given an encryption script, which has two functions:&lt;/p>
&lt;ol>
&lt;li>Generating public and private keys - &lt;code>make_pubpri&lt;/code>&lt;/li>
&lt;li>Encrypting data using the public key generated from the first function - &lt;code>encrypt&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="preliminary-analysis-make_pubpri-function">Preliminary Analysis: &lt;code>make_pubpri&lt;/code> function&lt;/h2>
&lt;p>Function generating public and private keys:&lt;/p></description></item></channel></rss>